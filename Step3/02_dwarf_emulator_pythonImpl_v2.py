global to_decode

to_decode = [111,8,168,34,6,8,8,34,6,18,6,22,8,8,34,18,6,22,8,8,34,18,6,22,8,8,34,18,6,22,8,8,34,148,1,40,68,0,21,3,21,3,47,73,0,14,36,28,142,142,166,2,131,101,39,22,14,71,83,46,97,241,100,117,220,39,34,22,14,19,198,110,168,116,155,198,217,39,34,22,14,213,174,106,231,54,11,133,101,39,34,40,12,0,14,152,48,64,0,0,0,0,0,47,255,127,14,184,48,64,0,0,0,0,0,47,255,127,48,23,48,21,5,21,5,47,51,0,21,4,21,4,47,202,0,23,23,19,23,23,19,49,21,2,21,2,47,30,0,21,7,21,7,47,181,0,23,23,21,3,22,21,5,49,34,18,52,28,40,204,255,19,21,3,21,3,47,122,255,52,23,18,14,255,255,255,255,0,0,0,0,26,22,14,0,0,0,0,255,255,255,255,26,8,32,37,23,23,18,14,255,255,255,255,0,0,0,0,26,22,14,0,0,0,0,255,255,255,255,26,8,32,37,18,23,21,4,34,39,12,255,255,255,255,26,22,21,3,26,22,18,21,4,22,28,12,255,255,255,255,26,22,21,3,8,255,26,8,2,36,14,180,6,64,0,0,0,0,0,34,148,4,34,12,255,255,255,255,26,18,21,4,8,8,37,39,23,23,22,8,32,36,33,23,22,8,32,36,33,22,23,23,19,23,23,19,23,23,8,1,28,18,40,111,255,19,21,2,40,3,0,47,50,255,47,68,255,22,48,23,21,2,21,5,21,5,23,23,23,48,23,21,2,47,160,1,23,23,18,21,4,28,40,3,0,47,5,0,49,34,47,233,255,19,23,23,19,22,21,3,48,22,18,14,255,255,255,255,0,0,0,0,26,22,14,0,0,0,0,255,255,255,255,26,8,32,37,47,245,0,21,4,18,14,255,255,255,255,0,0,0,0,26,22,14,0,0,0,0,255,255,255,255,26,8,32,37,47,112,0,8,32,36,33,39,23,23,19,18,23,49,22,18,14,255,255,255,255,0,0,0,0,26,22,14,0,0,0,0,255,255,255,255,26,8,32,37,47,175,0,21,4,18,14,255,255,255,255,0,0,0,0,26,22,14,0,0,0,0,255,255,255,255,26,8,32,37,47,95,0,8,32,36,33,39,23,23,19,23,23,49,34,23,22,21,2,63,28,40,65,255,23,23,19,23,23,19,23,23,19,22,23,23,40,3,0,47,98,254,47,116,254,21,2,39,22,21,3,39,18,8,4,36,22,8,28,37,33,12,255,255,255,255,26,21,2,39,22,18,8,18,37,22,8,14,36,33,12,255,255,255,255,26,21,3,39,23,23,19,23,23,19,47,91,255,22,21,2,39,18,8,26,36,22,8,6,37,33,12,255,255,255,255,26,22,21,3,39,21,2,39,18,8,14,37,22,8,18,36,33,12,255,255,255,255,26,23,23,19,23,23,19,47,111,255,18,23,48,18,50,30,52,30,14,72,6,64,0,0,0,0,0,34,148,4,22,23,34,12,255,255,255,255,26,22,23,39,21,1,50,30,49,34,52,30,14,72,6,64,0,0,0,0,0,34,6,22,18,23,33,21,3,39,8,32,36,33,23,23,19,18,14,255,255,255,255,0,0,0,0,26,22,14,0,0,0,0,255,255,255,255,26,8,32,37,23,21,2,23,23,49,34,18,54,28,40,156,255,19,19,22,23,23,40,3,0,47,153,254,47,220,254,23,22,18,14,255,255,255,255,0,0,0,0,26,22,14,0,0,0,0,255,255,255,255,26,8,32,37,23,23,18,14,255,255,255,255,0,0,0,0,26,22,14,0,0,0,0,255,255,255,255,26,8,32,37,21,4,52,30,14,120,6,64,0,0,0,0,0,34,148,4,21,4,39,21,3,12,50,101,120,69,34,12,255,255,255,255,26,18,21,4,39,21,3,18,8,4,36,22,8,28,37,33,12,255,255,255,255,26,23,23,18,21,4,22,28,12,255,255,255,255,26,21,3,12,0,0,0,128,26,40,8,0,12,73,101,36,23,47,5,0,12,23,50,101,132,47,197,4,21,2,39,21,3,39,21,4,21,4,8,32,36,33,23,8,32,36,33,23,23,19,23,23,19,23,23,19,23,23,19,23,23,19,23,23,19,23,23,19,23,23,19,22,23,23,19,47,154,253,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,0,0,0,0,0,0,0,0,222,221,157,72,241,144,121,6,169,116,191,149,231,30,148,119,227,128,109,14,139,175,237,45,66,205,146,251,192,103,232,208,251,163,179,242,71,206,57,108,224,153,79,231,33,242,36,90,234,143,55,214,196,168,60,226,188,177,227,132,191,16,94,206,218,100,179,162,240,80,242,65,64,112,233,15,102,82,192,28,75,126,248,22,183,38,94,81,203,141,164,238,228,87,179,98,65,32,189,57,122,56,205,114,139,172,122,243,155,179,99,89,221,90,247,48,188,236,63,16,122,46,57,0,223,122,223,53,19,189,154,225,92,179,248,218,20,130,121,248,5,35,12,179,233,128,121,6,64,217,0,105,111,135,94,3,20,112,133,163,98,225,200,86,86,143,116,233,9,228,212,145,9,90,199,220,47,245,101,172,7,221,113,133,246,220,158,1,235,249,206,81,125,177,177,30,111,68,190,10,254,124,39,59,188,105,56,132,152,162,62,178,81,111,41,124,114,153,121,205,100,10,24,98,213,82,192,10,5,98,7,240,147,49,24,19,148,203,8,185,60,205,244,75,138,212,229,222,116,154,79,246,208,21,74,214,52,212,202,178,59,1,233,100,210,193,108,244,219,233,120,157,22,146,120,17,230,137,86,51,219,126,76,7,133,97,235,230,11,23,32,208,21,170,4,243,158,182,242,188,234,210,179,78,92,77,141,215,196,191,210,126,243,240,235,88,63,28,89,139,107,31,4,211,136,174,92,0,92,111,105,186,222,142,108,193,39,187,188,154,119,141,215,86,32,62,91,118,45,33,55,207,207,45,46,25,6,40,175,140,91,87,154,188,206,33,100,119,235,185,127,82,64,67,248,105,215,123,188,173,41,195,242,115,127,138,127,115,228,211,1,227,178,190,126,5,88,184,89,88,121,25,196,44,57,166,105,236,35,213,176,83,50,245,162,57,93,227,41,139,129,206,226,68,109,161,16,204,88,255,217,68,20,44,16,119,125,129,87,251,200,200,247,60,138,134,34,18,209,213,115,65,50,238,41,53,142,245,157,122,172,37,53,81,172,75,149,129,245,204,83,206,40,135,22,121,248,96,214,162,206,201,12,243,118,156,184,240,169,179,159,8,168,219,25,201,195,77,158,31,12,78,89,162,120,225,255,52,251,20,68,176,58,179,31,211,120,2,77,24,154,106,129,44,242,242,147,185,28,96,216,228,222,238,226,73,225,12,213,156,119,30,62,192,158,134,1,169,80,222,121,117,171,196,106,114,64,72,208,56,112,18,190,234,45,129,64,140,183,118,73,232,173,4,43,23,196,6,102,117,145,132,37,102,248,190,160,181,243,92,204,107,148,174,53,165,170,135,122,201,246,168,3,145,95,158,59,204,31,190,32,187,151,239,207,255,22,79,149,144,166,225,26,80,205,137,213,110,43,176,38,104,99,242,95,86,155,54,140,142,122,190,144,105,64,184,37,53,187,215,71,24,199,64,90,53,16,159,87,163,174,236,237,233,177,122,51,208,186,229,85,99,85,83,151,136,207,243,192,94,61,33,214,160,135,147,56,117,240,22,2,228,224,204,128,217,124,198,136,108,156,65,157,130,27,69,246,59,250,123,240,17,78,21,193,196,235,53,7,189,157,223,248,156,117,190,87,228,24,189,166,99,211,127,231,239,99,27,66,131,45,7,131,127,97,15,148,68,247,205,189,248,202,2,200,97,168,249,48,10,55,59,240,127,169,197,108,162,13,87,14,225,22,12,234,149,2,107,94,160,132,83,29,200,5,219,133,119,95,76,200,146,23,70,88,5,141,254,188,130,218,161,158,85,176,205,213,79,237,31,135,157,57,85,111,221,38,239,209,78,196,19,104,254,213,113,250,28,234,58,97,213,140,155,28,15,93,196,202,43,65,15,208,101,216,224,155,104,0,17,176,104,128,210,91,99,75,93,77,149,121,127,136,114,117,122,2,206,102,28,240,252,211,27,106,0,142,28,154,25,37,238,214,135,8,159,142,147,77,29,161,216,129,77,154,43,229,210,245,182,90,50,92,209,193,175,234,100,28,182,51,253,87,189,193,67,72,240,184,55,242,124,186,92,208,12,129,114,84,244,254,171,186,132,99,167,64,20,134,216,55,88,222,54,241,3,106,15,161,143,212,16,47,236,131,88,155,12,192,168,164,254,143,97,6,162,93,160,122,233,185,255,129,103,55,138,121,180,86,49,205,94,175,228,111,224,217,135,89,212,212,180,37,125,154,235,170,254,223,89,83,245,139,220,58,60,206,109,14,151,98,33,157,146,201,232,244,155,58,108,146,83,218,69,176,231,238,156,235,212,104,63,79,67,41,205,18,247,77,14,154,198,168,177,70,15,25,28,60,135,69,43,201,223,175,70,63,136,232,97,199,24,145,151,177,145,249,112,77,96,130,31,143,244,139,193,255,244,39,179,8,117,154,81,13,155,97,250,144,20,141,38,194,55,126,86,145,118,160,37,192,89,67,66,83,12,50,19,253,66,247,239,186,69,185,72,17,231,168,207,25,181,95,143,165,50,115,43,124,118,170,16,192,12,159,104,113,165,28,12,255,255,255,255,26,12,24,0,3,255,34,12,255,255,255,255,26,18,8,2,37,28,12,255,255,255,255,26,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,18,18,8,2,37,22,8,30,36,33,12,255,255,255,255,26,39,18,8,9,36,34,12,255,255,255,255,26,18,8,7,36,28,12,255,255,255,255,26,18,18,8,5,36,22,8,27,37,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,18,8,9,36,22,8,23,37,33,12,255,255,255,255,26,39,18,8,3,36,39,18,18,8,5,36,22,8,27,37,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,8,3,37,39,18,18,8,2,36,22,8,30,37,33,12,255,255,255,255,26,28,12,255,255,255,255,26,18,8,9,36,34,12,255,255,255,255,26,18,18,8,9,36,22,8,23,37,33,12,255,255,255,255,26,39,18,8,3,37,39,18,8,3,37,22,8,29,36,33,12,255,255,255,255,26,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,18,8,9,36,34,12,255,255,255,255,26,18,8,3,37,22,8,29,36,33,12,255,255,255,255,26,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,18,8,3,37,39,18,18,8,9,36,22,8,23,37,33,12,255,255,255,255,26,39,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,28,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,12,159,104,113,165,28,12,255,255,255,255,26,18,8,10,37,34,12,255,255,255,255,26,18,8,3,37,22,8,29,36,33,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,28,12,255,255,255,255,26,18,18,8,5,36,22,8,27,37,33,12,255,255,255,255,26,34,12,255,255,255,255,26,12,24,0,3,255,34,12,255,255,255,255,26,12,23,85,16,210,39,18,18,8,5,36,22,8,27,37,33,12,255,255,255,255,26,34,12,255,255,255,255,26,12,23,85,16,210,39,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,12,159,104,113,165,28,12,255,255,255,255,26,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,18,8,2,37,28,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,12,159,104,113,165,28,12,255,255,255,255,26,18,8,9,36,34,12,255,255,255,255,26,18,8,2,37,28,12,255,255,255,255,26,18,8,7,36,28,12,255,255,255,255,26,18,8,3,36,39,12,159,104,113,165,28,12,255,255,255,255,26,18,8,10,37,34,12,255,255,255,255,26,12,159,104,113,165,28,12,255,255,255,255,26,18,18,8,2,36,22,8,30,37,33,12,255,255,255,255,26,28,12,255,255,255,255,26,18,54,22,12,23,85,16,210,39,18,18,8,9,36,22,8,23,37,33,12,255,255,255,255,26,39,18,18,8,2,36,22,8,30,37,33,12,255,255,255,255,26,28,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,8,10,37,34,12,255,255,255,255,26,18,8,3,37,39,18,8,3,37,22,8,29,36,33,12,255,255,255,255,26,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,12,159,104,113,165,28,12,255,255,255,255,26,18,18,8,5,36,22,8,27,37,33,12,255,255,255,255,26,34,12,255,255,255,255,26,12,159,104,113,165,28,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,12,159,104,113,165,28,12,255,255,255,255,26,12,24,0,3,255,34,12,255,255,255,255,26,18,8,3,37,39,12,24,0,3,255,34,12,255,255,255,255,26,18,8,3,37,22,8,29,36,33,12,255,255,255,255,26,18,8,3,36,39,18,8,10,37,34,12,255,255,255,255,26,18,8,3,36,39,22,49,28,18,40,242,254,19,39,18,8,2,37,28,12,255,255,255,255,26,12,159,104,113,165,28,12,255,255,255,255,26,12,24,0,3,255,34,12,255,255,255,255,26,18,8,7,36,28,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,28,12,255,255,255,255,26,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,12,159,104,113,165,28,12,255,255,255,255,26,18,18,8,5,36,22,8,27,37,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,8,7,36,28,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,28,12,255,255,255,255,26,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,18,18,8,5,36,22,8,27,37,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,8,3,37,22,8,29,36,33,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,8,9,36,34,12,255,255,255,255,26,18,8,3,36,39,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,12,23,85,16,210,39,18,18,8,9,36,22,8,23,37,33,12,255,255,255,255,26,39,18,8,9,36,34,12,255,255,255,255,26,18,8,10,37,34,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,28,12,255,255,255,255,26,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,12,24,0,3,255,34,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,12,159,104,113,165,28,12,255,255,255,255,26,18,8,3,36,39,18,18,8,5,36,22,8,27,37,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,18,8,2,37,22,8,30,36,33,12,255,255,255,255,26,39,18,18,8,2,37,22,8,30,36,33,12,255,255,255,255,26,39,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,28,12,255,255,255,255,26,18,8,3,37,39,18,8,2,37,28,12,255,255,255,255,26,12,24,0,3,255,34,12,255,255,255,255,26,18,8,2,37,28,12,255,255,255,255,26,18,18,8,2,36,22,8,30,37,33,12,255,255,255,255,26,28,12,255,255,255,255,26,18,8,10,37,34,12,255,255,255,255,26,18,8,2,37,28,12,255,255,255,255,26,18,8,7,36,28,12,255,255,255,255,26,18,18,8,9,36,22,8,23,37,33,12,255,255,255,255,26,39,18,8,10,37,34,12,255,255,255,255,26,18,8,9,36,34,12,255,255,255,255,26,12,23,85,16,210,39,18,18,8,9,36,22,8,23,37,33,12,255,255,255,255,26,39,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,28,12,255,255,255,255,26,12,159,104,113,165,28,12,255,255,255,255,26,18,8,3,37,22,8,29,36,33,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,18,18,8,9,36,22,8,23,37,33,12,255,255,255,255,26,39,12,23,85,16,210,39,18,8,3,36,39,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,18,8,7,36,28,12,255,255,255,255,26,18,18,8,2,36,22,8,30,37,33,12,255,255,255,255,26,28,12,255,255,255,255,26,18,18,8,9,36,22,8,23,37,33,12,255,255,255,255,26,39,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,8,2,37,28,12,255,255,255,255,26,18,8,3,36,39,18,8,3,37,39,18,8,3,37,39,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,28,12,255,255,255,255,26,18,8,3,37,22,8,29,36,33,12,255,255,255,255,26,18,8,3,36,39,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,18,8,2,37,28,12,255,255,255,255,26,18,18,8,9,36,22,8,23,37,33,12,255,255,255,255,26,39,12,159,104,113,165,28,12,255,255,255,255,26,18,18,8,2,36,22,8,30,37,33,12,255,255,255,255,26,28,12,255,255,255,255,26,18,8,2,37,28,12,255,255,255,255,26,18,8,10,37,34,12,255,255,255,255,26,18,18,8,2,37,22,8,30,36,33,12,255,255,255,255,26,39,18,8,9,36,34,12,255,255,255,255,26,18,8,7,36,28,12,255,255,255,255,26,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,18,8,9,36,22,8,23,37,33,12,255,255,255,255,26,39,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,8,3,36,39,18,8,9,36,34,12,255,255,255,255,26,18,8,3,36,39,18,8,3,37,39,18,8,9,36,34,12,255,255,255,255,26,18,18,8,5,36,22,8,27,37,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,18,8,3,37,39,18,8,9,36,34,12,255,255,255,255,26,18,18,8,2,37,22,8,30,36,33,12,255,255,255,255,26,39,12,23,85,16,210,39,18,8,3,37,39,18,8,3,36,39,12,24,0,3,255,34,12,255,255,255,255,26,18,18,8,5,36,22,8,27,37,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,18,8,2,37,28,12,255,255,255,255,26,18,8,10,37,34,12,255,255,255,255,26,18,8,10,37,34,12,255,255,255,255,26,12,159,104,113,165,28,12,255,255,255,255,26,18,18,8,5,36,22,8,27,37,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,18,18,8,2,36,22,8,30,37,33,12,255,255,255,255,26,28,12,255,255,255,255,26,18,18,8,5,36,22,8,27,37,33,12,255,255,255,255,26,34,12,255,255,255,255,26,12,23,85,16,210,39,18,8,7,36,28,12,255,255,255,255,26,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,18,18,8,5,36,22,8,27,37,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,8,7,36,28,12,255,255,255,255,26,18,8,3,37,39,12,23,85,16,210,39,18,8,3,37,39,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,28,12,255,255,255,255,26,18,8,3,37,22,8,29,36,33,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,28,12,255,255,255,255,26,12,23,85,16,210,39,18,18,8,2,37,22,8,30,36,33,12,255,255,255,255,26,39,12,159,104,113,165,28,12,255,255,255,255,26,18,8,10,37,34,12,255,255,255,255,26,18,8,3,36,39,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,28,12,255,255,255,255,26,18,8,6,36,22,8,26,37,33,12,255,255,255,255,26,18,18,8,9,36,22,8,23,37,33,12,255,255,255,255,26,39,18,8,2,37,28,12,255,255,255,255,26,18,8,3,37,39,18,18,8,2,36,22,8,30,37,33,12,255,255,255,255,26,28,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,12,24,0,3,255,34,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,18,8,5,36,22,8,27,37,33,12,255,255,255,255,26,34,12,255,255,255,255,26,12,24,0,3,255,34,12,255,255,255,255,26,18,18,8,2,36,22,8,30,37,33,12,255,255,255,255,26,28,12,255,255,255,255,26,18,8,3,37,22,8,29,36,33,12,255,255,255,255,26,18,8,7,36,28,12,255,255,255,255,26,18,8,7,36,28,12,255,255,255,255,26,12,24,0,3,255,34,12,255,255,255,255,26,18,8,9,36,34,12,255,255,255,255,26,18,8,10,37,34,12,255,255,255,255,26,18,18,8,2,37,22,8,30,36,33,12,255,255,255,255,26,39,18,8,7,36,28,12,255,255,255,255,26,18,8,9,36,34,12,255,255,255,255,26,18,18,8,2,37,22,8,30,36,33,12,255,255,255,255,26,39,18,8,9,36,34,12,255,255,255,255,26,12,23,85,16,210,39,18,8,3,36,39,18,8,2,37,28,12,255,255,255,255,26,18,18,8,2,37,22,8,30,36,33,12,255,255,255,255,26,39,18,8,10,37,34,12,255,255,255,255,26,18,8,2,37,28,12,255,255,255,255,26,18,8,9,36,34,12,255,255,255,255,26,12,24,0,3,255,34,12,255,255,255,255,26,18,8,2,37,28,12,255,255,255,255,26,18,8,7,36,28,12,255,255,255,255,26,18,18,8,5,36,22,8,27,37,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,18,8,9,36,22,8,23,37,33,12,255,255,255,255,26,39,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,8,3,36,39,12,24,0,3,255,34,12,255,255,255,255,26,12,159,104,113,165,28,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,8,7,36,28,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,18,8,2,37,22,8,30,36,33,12,255,255,255,255,26,39,18,8,9,36,34,12,255,255,255,255,26,18,18,8,9,36,22,8,23,37,33,12,255,255,255,255,26,39,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,18,8,2,37,22,8,30,36,33,12,255,255,255,255,26,39,18,8,2,37,28,12,255,255,255,255,26,18,18,8,9,36,22,8,23,37,33,12,255,255,255,255,26,39,18,8,3,36,39,18,8,3,36,39,12,159,104,113,165,28,12,255,255,255,255,26,12,24,0,3,255,34,12,255,255,255,255,26,18,8,3,36,39,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,28,12,255,255,255,255,26,18,8,9,36,34,12,255,255,255,255,26,12,23,85,16,210,39,18,8,3,37,22,8,29,36,33,12,255,255,255,255,26,18,18,8,2,36,22,8,30,37,33,12,255,255,255,255,26,28,12,255,255,255,255,26,12,159,104,113,165,28,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,8,7,36,28,12,255,255,255,255,26,18,8,3,36,39,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,18,8,2,36,22,8,30,37,33,12,255,255,255,255,26,28,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,18,8,7,36,28,12,255,255,255,255,26,18,8,3,36,39,12,23,85,16,210,39,18,8,2,37,28,12,255,255,255,255,26,12,23,85,16,210,39,12,159,104,113,165,28,12,255,255,255,255,26,18,18,8,6,37,22,8,26,36,33,12,255,255,255,255,26,34,12,255,255,255,255,26,12,23,85,16,210,39,18,8,7,36,28,12,255,255,255,255,26,18,18,8,2,37,22,8,30,36,33,12,255,255,255,255,26,39,47,109,236,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]


dwarf_op = {
    0x3: "addr",
    0x6: "deref",
    0x8: "const1u",
    0x9: "const1s",
    0xa: "const2u",
    0xb: "const2s",
    0xc: "const4u",
    0xd: "const4s",
    0xe: "const8u",
    0xf: "const8s",
    0x10: "constu",
    0x11: "consts",
    0x12: "dup",
    0x13: "drop",
    0x14: "over",
    0x15: "pick",
    0x16: "swap",
    0x17: "rot",
    0x18: "xderef",
    0x19: "abs",
    0x1a: "and",
    0x1b: "div",
    0x1c: "minus",
    0x1d: "mod",
    0x1e: "mul",
    0x1f: "neg",
    0x20: "not",
    0x21: "or",
    0x22: "plus",
    0x23: "plus_uconst",
    0x24: "shl",
    0x25: "shr",
    0x26: "shra",
    0x27: "xor",
    0x28: "bra",
    0x29: "eq",
    0x2a: "ge",
    0x2b: "gt",
    0x2c: "le",
    0x2d: "lt",
    0x2e: "ne",
    0x2f: "skip",
    0x30: "lit",
    0x50: "reg",
    0x70: "breg",
    0x90: "regx",
    0x91: "fbreg",
    0x92: "bregx",
    0x93: "piece",
    0x94: "deref_size",
    0x95: "xderef_size",
    0x96: "nop",
    0x97: "push_object_address",
    0x98: "call2",
    0x99: "call4",
    0x9a: "call_ref",
    0x9b: "form_tls_address",
    0x9c: "call_frame_cfa",
    0x9d: "bit_piece",
    0x9e: "implicit_value",
    0x9f: "stack_value",
    0xa0: "implicit_pointer",
    0xa1: "addrx",
    0xa2: "constx",
    0xa3: "entry_value",
    0xa4: "const_type",
    0xa5: "regval_type",
    0xa6: "deref_type",
    0xa7: "xderef_type",
    0xa8: "convert",
    0xa9: "reinterpret",
    0xe0: "lo_user",
    0xff: "hi_user"
    }

arch_size=4
#TO CHECK
ULEB128=0xAA
SLEB128=0xBB

dwarf_nb_operands = {
    0x3: [1, arch_size],
    0x8: [1,1],
    0x9: [1,1],
    0xa: [1,2],
    0xb: [1,2],
    0xc: [1,4],
    0xd: [1,4],
    0xe: [1,8],
    0xf: [1,8],
    0x10: [1,ULEB128],
    0x11: [1,SLEB128],
    0x15: [1,1],
    0x23: [1,ULEB128],
    0x28: [1,2],
    0x2f: [1,2],
    0x70: [1,SLEB128], #until 0x8f
    0x90: [1,ULEB128],
    0x91: [1,SLEB128],
    0x92: [2,ULEB128, SLEB128],
    0x93: [1,ULEB128],
    0x94: [1,1],
    0x95: [1,1],
    0x98: [1,2],
    0x99: [1,4],
    0x9a: [1,4], #or 8
    0x9d: [2,ULEB128,ULEB128],
    0x9e: [2,ULEB128],
    0xa0: [2,4, SLEB128], # or 8
    0xa1: [1,ULEB128],
    0xa2: [1,ULEB128],
    0xa3: [2,ULEB128,0], #0 defines the block of that size, not used in the chall
    0xa4: [3,ULEB128, 1, 0],
    0xa5: [2,ULEB128, ULEB128],
    0xa6: [2,1, ULEB128],
    0xa7: [2,1, ULEB128],
    0xa8: [1,ULEB128],
    0xa9: [1,ULEB128]
}
#lit0 + litteral for 0x30 to 0x4f
#reg0 + regnum for 0x50 to 0x6f
#breg0 + regnum  for 0x70 to 0x8f

#nb_operands from 0x70 to 0x8f: 1

#takes the opcode_list
#returns (result, number of bytes)
def uleb128(op_list):
    result = 0
    shift = 0
    i = 0
    while(True):
        byte = op_list[i]
        result |= (0x7F & byte) << shift
        if (0x80 & byte ==0):
            break
        else:
            shift += 7
            i+=1
    return (result, i+1)

def sleb128(op_list):
    result = 0
    shift = 0
    i = 0
    while(True):
        byte = op_list[i]
        result |= (0x7F & byte) << shift
        shift += 7
        if (0x80 & byte == 0):
            break
        else:
            i+=1
    if (0x40 & byte):
        result |= -1 << 7*(i+1)
    return (result, i+1)


global debug
debug = False

def print_debug(s):
    global debug
    if debug:
        print(s)

def convert_little_endian(s):
    #convert 003043 into 433000
    length = int(len(s)/2)
    temp_str = ""
    for i in range(length):
        temp_str = s[i*2:i*2+2] + temp_str
    return temp_str

def convert_two_bytes_signed(s):
    #s is in hex format
    num = int(s,16)
    #check if MSbit is set:
    MSB = num >> 15
    if not MSB:
        return num
    else:
        #need to negate
        return (((num ^ 0xFFFF) + 1)&0xFFFF)* -1


def stack_push(l_list, e_int):
    l_list.append(e_int)
    return l_list

def stack_pop(l_list):
    if len(l_list)>0:
        return l_list[:-1],l_list[-1]
    else:
        raise Exception("Error: empty stack, cannot pop")

def convert_abs_to_rel_adr(adr_int):
    #adr
    rel_adr_int = adr_int - 0x400258
    return rel_adr_int

def deref(abs_int, size=8):
    global to_decode
    rel_adr_int = convert_abs_to_rel_adr(abs_int)
    temp_val = "".join(["%02x" % i for i in to_decode[rel_adr_int:rel_adr_int+size][::-1]])
    return int(temp_val,16)

def get_operands_and_cursor_offset(cursor_offset):
    local_cursor = cursor_offset
    opcode = to_decode[cursor_offset]
    local_cursor += 1
    
    if opcode not in dwarf_op.keys():
        raise Exception("Error: opcode unknown")
    
    if opcode in dwarf_nb_operands.keys():
        #retrieve the number of operands
        nb_operand = dwarf_nb_operands[opcode][0]
        print_debug("\tdebug, nb_operand: " + str(nb_operand))

        operands_hex = []

        #loop into the number of operands if any
        for i in range(nb_operand):
            size_operand = dwarf_nb_operands[opcode][1+i]
            if size_operand == 0:
                print_debug("Warning, size_operand is 0")
            elif size_operand == ULEB128:
                result, size_operand = uleb128(to_decode[local_cursor:])
            elif size_operand == SLEB128:
                result, size_operand = sleb128(to_decode[local_cursor:])
            
            #print_debug("\tdebug: size_operand: " + str(size_operand))
            operand_value = convert_little_endian("".join(["%02x" % i for i in to_decode[local_cursor:local_cursor+size_operand]]))
            operands_hex.append(operand_value)
            #operands_str += " 0x" + operand_value
            #print_debug("\tdebug, operands_str:" + convert_little_endian(operands_str))
            
            local_cursor+=size_operand
    return operands_hex, local_cursor

def minus(op1, op2):
    #compute op1-op2 on 8 bytes
    r = op1-op2

    if r<0:
        return 0x10000000000000000 + r 
    return r

def print_stack(stack):
    print("[" + ", ".join(["0x%016x" % i for i in stack]) + "]")
print(len(to_decode))

    

def rotateRight(val, n):
    return ((val>>n) | val<<(32-n)) & 0xFFFFFFFF

def rotateLeft(val, n):
    return ((val<<n) | val>>(32-n)) & 0xFFFFFFFF



def MSB4(val):
    return (val>>32)&0xFFFFFFFF

def LSB4(val):
    return val&0xFFFFFFFF

def LSB8(val):
    return val & 0xFFFFFFFFFFFFFFFF


def QWORD(valMSB, valLSB):
    return (valMSB<<32) | valLSB


def F1(B0, B1):
    temp0 = (LSB4(B0) ^ (MSB4(B0)+LSB4(B1)))
    temp1 = deref(0x4006b4 + ((MSB4(B1)&0xFF)<<2), 4)
    temp2 = LSB4(temp0 + temp1)
    temp3 = LSB4(MSB4(B0) & B1)
    f = QWORD(temp3, temp2)
    return f

def F2(B0, B1):
    temp0 = LSB4( minus(LSB4(B1), LSB4(B0)^MSB4(B0)+LSB4(B1)) )
    temp1 = (deref(0x4006b4 + ((MSB4(B1)&0xFF)<<2), 4))
    temp2 = LSB4(B0) ^ (MSB4(B0)+LSB4(B1))
    temp3 = LSB4( temp2 + temp1)
    temp4 = temp3 ^(MSB4(B1)>>8)
    f = QWORD(temp4, temp0)
    return f


def F_V1(B0, B1, Zx, m):
    vtemp = deref(0x400678+m*4 ,4) ^ LSB4(B0)
    vtemp = LSB4(minus(vtemp, LSB4(MSB4(B0)+0x45786532)))

    vtemp2 = Zx ^ ( LSB4(MSB4(B0)+0x45786532))
    vtemp2 = vtemp2^rotateLeft(MSB4(B1), 4)
    V1 = QWORD(vtemp2, vtemp)
    return V1

def F_V2(B0, B1):
    vtemp = LSB4(MSB4(B0)+0x45786532) ^ LSB4(B1)
    vtemp2 = rotateLeft(MSB4(B1), 4)
    V2 = QWORD(vtemp2, vtemp)
    return V2
    #vtemp2 = LSB8(rotateLeft(vtemp2,4))
    #V2 = vtemp | vtemp2

def F_Zx(B0, B1):
    temp = LSB4(MSB4(B0) + 0x45786532) ^ LSB4(B1)
    xorMSBit = temp & 0x80000000

    if xorMSBit:
        Zx = 0x60bf080f # 0x84653217
    else:
        Zx = 0x818f694a # 0x17246549
    return Zx


cursor = 0x085d


#WARNING: 
#pour cursor, ne pas mettre une valeur inferieure a 0x23. vu qu'il dereference des adresses, il faut mettre la stack a un etat par defaut:
#@ rel mini: 0x0023 (@ absolue|0x40027b|)
#@stack (reg31) | qword0 | qword1 | qword2 | qword3 | 0x0

#cursor: addresse relative dans les instructions dwarf
cursor=0x23

#compteur d'executions executees
s = 0

#sert a personnaliser le break dans l'execution de code
break_debug = 0
break_debug1 = 0
break_debug2 = 0
break_debug3 = 0
break_debug4 = 0

#pour sauvegarder la trace de tous les jumps
jumps = []

dwarf_stack = [0xDEADBEEF, 0x4242424241414141, 0x4444444443434343, 0x4646464645454545, 0x4848484847474747, 0x0]

#dwarf_stack = [0x84653217]
print_stack(dwarf_stack)

debug_list=[]

#pour afficher les operandes a chaque instruction
operands = []
while ( (cursor < len(to_decode) ) and s < 3000000):

    if cursor == 0x5e:
        print("WIN")
        break
    elif cursor == 0x6a:
        print("LOSE")
        break
    print_debug(s)
    print_debug("cursor: %04x (op nb: %d)" % (cursor,s))

    opcode = to_decode[cursor]

    if opcode >= 0x30 and opcode <= 0x4f:
        opcode_suffix = str(opcode-0x30)
        opcode = 0x30
    elif opcode >= 0x50 and opcode <= 0x6f:
        opcode_suffix = str(opcode-0x50)
        opcode = 0x50
    elif opcode >= 0x70 and opcode <= 0x8f:
        opcode_suffix = str(opcode-0x70)
        opcode = 0x70

    #offset for advancing the cursor at the end of the current operation
    #set cursor_offset for 1, for all opcodes which do not have any operand
    cursor_offset = cursor + 1

    if opcode == 6: #deref
        dwarf_stack, pop = stack_pop(dwarf_stack)
        v = deref(pop)
        dwarf_stack = stack_push(dwarf_stack, v)
    elif opcode == 8: #const1u
        operands, cursor_offset = get_operands_and_cursor_offset(cursor)
        dwarf_stack = stack_push(dwarf_stack, int(operands[0],16))
    elif opcode == 0xc: #const4u
        operands, cursor_offset = get_operands_and_cursor_offset(cursor)
        dwarf_stack = stack_push(dwarf_stack, int(operands[0],16))
    elif opcode == 0xe: #const8u
        operands, cursor_offset = get_operands_and_cursor_offset(cursor)
        dwarf_stack = stack_push(dwarf_stack, int(operands[0],16))
    elif opcode == 0x12: #dup #OK
        dwarf_stack = stack_push(dwarf_stack, dwarf_stack[-1])
    elif opcode == 0x13: #drop #OK
        dwarf_stack, _ = stack_pop(dwarf_stack)
    elif opcode == 0x15: #pick #OK
        operands, cursor_offset = get_operands_and_cursor_offset(cursor)
        dwarf_stack = stack_push(dwarf_stack, dwarf_stack[int(operands[0],16)*(-1)-1])
    elif opcode == 0x16: #swap
        dwarf_stack = dwarf_stack[:-2] + dwarf_stack[-1:] + dwarf_stack[-2:-1]
    elif opcode == 0x17: #rot
        dwarf_stack = dwarf_stack[:-3] + dwarf_stack[-1:] + dwarf_stack[-3:-1]
    elif opcode == 0x1a: #and
        dwarf_stack, tos = stack_pop(dwarf_stack)
        dwarf_stack, tos2 = stack_pop(dwarf_stack)
        dwarf_stack = stack_push(dwarf_stack, tos&tos2)
    elif opcode == 0x1c: #minus #OK, a verifier dans gdb
        dwarf_stack, tos = stack_pop(dwarf_stack)
        dwarf_stack, tos2 = stack_pop(dwarf_stack)
        dwarf_stack = stack_push(dwarf_stack, minus(tos2,tos))
    elif opcode == 0x1e: #mul OK
        dwarf_stack, tos = stack_pop(dwarf_stack)
        dwarf_stack, tos2 = stack_pop(dwarf_stack)
        dwarf_stack = stack_push(dwarf_stack, tos2*tos)
    elif opcode == 0x21: #or #OK
        dwarf_stack, tos = stack_pop(dwarf_stack)
        dwarf_stack, tos2 = stack_pop(dwarf_stack)
        dwarf_stack = stack_push(dwarf_stack, tos2|tos)
    elif opcode == 0x22: #plus #OK
        dwarf_stack, tos = stack_pop(dwarf_stack)
        dwarf_stack, tos2 = stack_pop(dwarf_stack)
        dwarf_stack = stack_push(dwarf_stack, tos2+tos)
    elif opcode == 0x24: #shl #OK
        dwarf_stack, tos = stack_pop(dwarf_stack)
        dwarf_stack, tos2 = stack_pop(dwarf_stack)
        dwarf_stack = stack_push(dwarf_stack, tos2 << tos)
    elif opcode == 0x25: #shr #OK
        dwarf_stack, tos = stack_pop(dwarf_stack)
        dwarf_stack, tos2 = stack_pop(dwarf_stack)
        dwarf_stack = stack_push(dwarf_stack, tos2 >> tos)
    elif opcode == 0x27: #xor #OK
        dwarf_stack, tos = stack_pop(dwarf_stack)
        dwarf_stack, tos2 = stack_pop(dwarf_stack)
        dwarf_stack = stack_push(dwarf_stack, tos2^tos)
    elif opcode == 0x28: #bra #OK
        dwarf_stack, tos = stack_pop(dwarf_stack)
        operands, cursor_offset = get_operands_and_cursor_offset(cursor)
        if tos:
            operand = convert_two_bytes_signed(operands[0])
            cursor_offset += operand
            print_debug("BRA TAKEN ! BRA TAKEN !")
            jumps.append("bra from %04x to %04x" %(cursor, cursor_offset))
        else:
            print_debug("BRA NOT TAKEN !")
            jumps.append("no bra, from %04x to %04x" % (cursor, cursor_offset))
    elif opcode == 0x2f: #skip #OK
        operands, cursor_offset = get_operands_and_cursor_offset(cursor)
        operand = convert_two_bytes_signed(operands[0])
        cursor_offset += operand
        print_debug("SKIP ! SKIP ! SKIP !")
        jumps.append("skip from %04x to %04x" %(cursor, cursor_offset))
    elif opcode == 0x30: #lit<n> #OK
        real_opcode = to_decode[cursor]
        lit = real_opcode-opcode
        dwarf_stack = stack_push(dwarf_stack, lit)
        print_debug("lit: %d" %lit)
    #elif opcode == 0x50:
    #    raise Exception("not implemented, skip this")
    elif opcode == 0x94: #deref_size
        operands, cursor_offset = get_operands_and_cursor_offset(cursor)
        dwarf_stack, pop = stack_pop(dwarf_stack)
        v = deref(pop, size=int(operands[0],16))
        dwarf_stack = stack_push(dwarf_stack, v)
    elif opcode == 0x96:
        print("NOP")
    else:
        raise Exception("Error opcode 0x%02x not implemented" % opcode)
    
    print_debug("opcode: 0x%02x %s %s" % (opcode, dwarf_op[opcode], operands))

    operands = []
    #pour afficher la stack apres chaque execution d'instruction
    #print_stack(dwarf_stack)

    cursor = cursor_offset
    #number of instruction counter
    s+=1

    #for debug and breakpoints purposes
    #break sur la valeur d'une instruction
    """
    if opcode == 0x30:
        debug += 1
        if (debug == 6):
            break
    """
    
    #pour breaker lorsque l'@ relative courante vaut une certaine valeur
    if cursor == 0xb0:
        break_debug2 += 1
        print("cursor: %04x (op nb: %d)" % (cursor,s))
        print("opcode: 0x%02x %s %s" % (opcode, dwarf_op[opcode], operands))
        print_stack(dwarf_stack)
        print("stack size: " + str(len(dwarf_stack)))
        print("")
        print("number of instructions: " + str(s))
        
        #if break_debug2 == 4:
        #   break

    #pour breaker apres un nb specifique d'instructions
    #if s == 1000000:
    #    break


#fin de l'execution

print("number of iterations: " + str(break_debug2))
print("debug_list: " + str(debug_list))

print("")
print("nb of instructions: %d" % s)
print("next instruction to be executed: |0x%06x| 0x%04x" % (0x400258+cursor, cursor))

print("")

#print_stack(dwarf_stack)
#print("stack size: " + str(len(dwarf_stack)))

input_key = [0x4242424241414141, 0x4444444443434343, 0x4646464645454545, 0x4848484847474747]

init_h1 = input_key[0]
init_h0 = input_key[1]

init_h1_odd = input_key[2]
init_h0_odd = input_key[3]

for a in range(4):

    if a == 0:
        B0 = init_h1_odd
        B1 = init_h0_odd
        H1 = init_h1
        H0 = init_h0
        H1_odd = init_h1_odd
        H0_odd = init_h0_odd
    else:
        H1 = v0
        H0 = v1
        H1_odd = v2
        H0_odd = v3

    for c in range(2):
        
        for b in range(4): #b is decremented in the real code
            temp_b0 = F1(B0, B1)
            temp_b1 = F2(B0, B1)
            B0 = temp_b0
            B1 = temp_b1
        

        if c == 0:
            C1 = H0
            C0 = H1
        elif c==1:
            C1 = H0_odd
            C0 = H1_odd
        else:
            raise Exception("Not implemented yet, c-loop")

        for h in range(15):
            #@0x0151 h initialiaation
            #loop from 0x154

            V1 = B0
            V2 = B1

            for m in range(h+1):
                Zx = F_Zx(V1, V2)
                v_temp = F_V1(V1, V2, Zx, m)
                V2 = F_V2(V1, V2)
                V1 = v_temp

            J1 = MSB4(C1)
            J0 = LSB4(C1)

            for k in range(2):

                base_adr = 0x400648

                for j in range(6):
                    temp1 = J0 ^ LSB4(J1 + deref(base_adr+j*8,4))
                    temp2 = J1 ^ (deref(base_adr + 8*j+4, 8) | temp1 )
                    temp3 = QWORD(temp2, temp1)

                    J1 = MSB4(temp3)
                    J0 = LSB4(temp3)

                Y0 = J1
                Y1 = J0

                if (k==1):
                    break

                temp2 = rotateLeft(LSB4(C0)  ^ Y1, 4) ^ Y0
                temp3 = rotateRight(MSB4(C0) ^ Y0, 18)^ Y1

                YF0 = V1 ^ QWORD(temp3, temp2)
                YF1 = LSB4(YF0)
                YF2 = MSB4(YF0)

                J0 = YF1
                J1 = YF2
                V1 = V2
                V2 = YF0
                C0 = C1
                C1 = h
                #end k loop

            X0 = C0
            Z0 = V2
            Z1 = V1
            Z2 = Y1
            Z3 = Y0

            temp1 = rotateRight(LSB4(X0)   ^Z3, 6)
            temp2 = rotateRight(MSB4(X0)^Z2^Z3, 14)
            H0 = Z1 ^ QWORD(temp2, temp1)
            H1 = Z0

            C1 = H0
            C0 = H1
            #end h loop

        
        B0 = H1
        B1 = H0
        if c==0:
            v0 = H1
            v1 = H0
        if c==1:
            v2 = H1
            v3 = H0
        print("debug: c H")
        print("H1 | H0: " + hex(H1) + " " + hex(H0))
        #end c loop
    
    #end a-loop


print("\nfinal")
print("v0: " + hex(v0))
print("v1: " + hex(v1))
print("v2: " + hex(v2))
print("v3: " + hex(v3))

print("S0: " + hex(0x65850b36e76aaed5))
print("S1: " + hex(0xd9c69b74a86ec613))
print("S2: " + hex(0xdc7564f1612e5347))
print("S3: " + hex(0x658302a68e8e1c24))

#printing all the branches
"""
print("")
for j in jumps:
    print(j)
"""

